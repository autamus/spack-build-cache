name: Spack Build Cache

on:
  pull_request: []
  schedule:
    - cron: "0 * * * *"
  push:
    branches:
      - main 

jobs:

  # Note: this randomly selects 25 spack packages to build, for the build-binaries step
  # You can update this matrix generation step to derive packages however you like
  prepare:
    runs-on: ubuntu-latest
    permissions:
      packages: read
    outputs:
      packages: ${{ steps.choose.outputs.packages }}

    name: Randomly Choose Packages
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Generate Package Matrix
        id: choose
        run: pip install requests && python scripts/generate-matrix.py ${{ github.event_name }}

  build-binaries:
    runs-on: ubuntu-latest
    needs:
      - prepare
    permissions:
      packages: write
    strategy:
      fail-fast: false
      matrix:
        package: ${{ fromJson(needs.prepare.outputs.packages) }}

    name: Build Package Binaries
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Build Spack Package
        uses: vsoch/spack-package-action/package@add/buildcache-action
        id: package
        with:
          package: ${{ matrix.package }}
          token: ${{ secrets.GITHUB_TOKEN }}
          deploy: ${{ github.event_name != 'pull_request' }}

      - name: Update Build Cache
        uses: vsoch/spack-package-action/buildcache@add/buildcache-action
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          deploy: ${{ github.event_name != 'pull_request' }}
          
      - name: Push Changes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |  
          printf "GitHub Actor: ${GITHUB_ACTOR}\n"
          git config --global user.name "github-actions"
          git config --global user.email "github-actions@users.noreply.github.com"
          git config pull.rebase false 
          ls .
          git add docs/*
          git status

          set +e
          git status | grep -e "modified" -e "new"
          if [ $? -eq 0 ]; then
            set -e
            printf "Changes\n"
            git commit -m "Automated push to update build cache $(date '+%Y-%m-%d')" || exit 0
            git pull origin main || printf "Does not exist yet.\n"
            git push origin main || exit 0
          else
            set -e
            printf "No changes\n"
          fi
